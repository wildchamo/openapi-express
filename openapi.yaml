openapi: 3.1.1

info:
  title: Fake OpenAPI Express Platzi
  version: 1.2.0
  description: |-
    This is a sample FakeAPI Store Server based on the OpenAPI 3.X specification. You can find out more about Swagger at https://swagger.io. In the third iteration of the pet store, we've switched to the design first approach. You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3. JOSE

    Some useful links:
    - [FakeAPI Store](https://fakeapi.platzi.com/)

servers:
  - url: http://localhost:4000/v1
    description: Versión 1 de la API
  - url: http://localhost:4000/v2
    description: Versión 2 de la API

externalDocs:
  description: Find out more about FakeAPI Store
  url: https://fakeapi.platzi.com/
tags:
  - name: Users
    description: Operaciones relacionadas con usuarios

  - name: Products
    description: Operaciones relacionadas con productos

  - name: System
    description: Operaciones relacionadas con el sistema
    externalDocs:
      description: Find out more about FakeAPI Store
      url: https://fakeapi.platzi.com/

components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token
  schemas:
    HelloResponse:
      type: object
      properties:
        message:
          type: string
    HelloRootResponse:
      type: object
      properties:
        message:
          type: string
    Product:
      type: object
      required:
        - name
        - price
        - category
      properties:
        id:
          type: integer
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: "Macbook pro m3"
        description:
          type: string
          maxLength: 500
          example: "Macbook pro m3"
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          example: 1000.00
        category:
          type: string
          enum: [electronics, books, clothes, food]
          example: electronics
        tags:
          type: array
          items:
            type: string
          minItems: 1
          example: ["macbook", "m4"]
        inStock:
          type: boolean

          example: true
        specifications:
          type: object
          additionalProperties:
            type: string
        ratings:
          type: array
          example: [{ score: 5, comment: "Excelente producto" }]
          items:
            required:
              - score
              - comment
            properties:
              score:
                type: integer
                minimum: 1
                maximum: 5
              comment:
                type: string
                maxLength: 500
      securitySchemes:
        JWT:
          type: http
          scheme: bearer
          bearerFormat: JWT
          description: JWT token

security:
  - JWT: []

paths:
  /:
    get:
      tags:
        - System
      summary: Hello Jose
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HelloResponse"
  /hello:
    get:
      tags:
        - System
      summary: Hello World
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HelloRootResponse"
  /users:
    post:
      tags:
        - Users
      summary: crear un nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - age
                - email
              properties:
                name:
                  type: string
                  minLength: 2
                age:
                  type: integer
                  minimum: 18
                email:
                  type: string
                  format: email
      responses:
        "201":
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  age:
                    type: integer
                  email:
                    type: string
  /users/{id}:
    get:
      tags:
        - Users
      summary: obtener un usuario por el id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Usuario obtenido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

    post:
      tags:
        - Users
      summary: actualizar un nuevo usuario existente
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - age
                - email
              properties:
                name:
                  type: string
                  minLength: 2
                age:
                  type: integer
                  minimum: 18
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: Usuario actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  age:
                    type: integer
                  email:
                    type: string
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /auth/login:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
              password:
                type: string

        responses:
          "200":
            description: Login exitoso
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    token:
                      type: string

  /products:
    post:
      tags:
        - Products
      summary: crear un nuevo producto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Producto creado exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"

  /products/{id}:
    get:
      tags:
        - Products
      summary: obtener un producto por id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Producto obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Producto no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    post:
      tags:
        - Products
      summary: actualizar un producto existente
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Producto actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Producto no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
